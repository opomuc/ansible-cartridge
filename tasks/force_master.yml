---
- name: return from checks
  block:
    - fail:
        msg: "Ansible limit must be defined when using master switch playbook"
    - meta: end_play
  run_once: true
  when: ansible_limit is not defined

- name: Setup facts
  import_tasks: facts.yml
  vars:
    tarball_deploy: cartridge_package_path is not defined or cartridge_package_path is regex('\.tar\.gz$')

- name: Waiting for instances to be ready
  vars:
    states:
      - Unconfigured
      - RolesConfigured
    retries: "{{ state_check_retries | default(250) }}"
    delay: "{{ state_check_delay | default(5) }}"
  import_tasks: instance_state.yml

- name: Select one not expelled instance
  set_fact:
    one_not_expelled_instance: '{{ hostvars | get_one_not_expelled_instance(play_hosts) }}'

- name: Set control instance facts
  set_fact:
    control_host: '{{ one_not_expelled_instance }}'
    control_sock: '{{ cartridge_app_name | get_instance_control_sock(one_not_expelled_instance, run_dir) }}'
    control_http_port: '{{ hostvars[one_not_expelled_instance].config.http_port }}'
  when: >-
    cartridge_auth is defined
    or cartridge_app_config is defined
    or cartridge_bootstrap_vshard is defined
    or cartridge_failover is defined
    or cartridge_failover_params is defined

- name: Get replicasets
  cartridge_get_replicasets:
    hostvars: '{{ hostvars }}'
    play_hosts: '{{ play_hosts }}'
    control_host: '{{ control_host }}'
  register: replicasets
  run_once: true

- name: Manage replicasets (eventual failover)
  include_tasks: manage_replicaset.yml
  vars:
    replicaset:
      alias: '{{ item.alias }}'
      failover_priority: '{{ item.instances | get_instances_in_dc(play_hosts) }}'
      roles: '{{ item.roles }}'
      instances: '{{ item.instances }}'
    join_host: '{{ replicasets.meta.join_host }}'
  loop: '{{ replicasets.meta.replicasets }}'
  run_once: true
  when: cartridge_failover_params is defined and cartridge_failover_params.mode == 'eventual'

- name: Find instances to promote (stateful failover)
  cartridge_get_uuids:
    replicasets: '{{ replicasets.meta.replicasets }}'
    instances: '{{ play_hosts }}'
    control_sock: '{{ control_sock }}'
    hostvars: '{{ hostvars }}'
  register: instances_to_promote
  run_once: true
  delegate_to: '{{ control_host }}'
  when: cartridge_failover_params is defined and cartridge_failover_params.mode == 'stateful'

- name: Manage replicasets (stateful failover)
  vars:
    replicaset_uuid: '{{ item.replicaset_uuid }}'
    instance_uuid: '{{ item.instance_uuid }}'
  uri:
    url: "http://127.0.0.1:{{ control_http_port }}/admin/api"
    method: POST
    status_code: 200
    body_format: json
    return_content: yes
    timeout: 5
    body: "{{ lookup('template', 'templates/promote.json.j2') }}"
  delay: 1
  retries: 2
  register: result
  until: >
    result is defined and
    result.json is defined and
    'data' in result.json and
    'promotionResponse' in result.json['data']
  loop: '{{ instances_to_promote.meta }}'
  run_once: true
  delegate_to: '{{ control_host }}'
  tags: cartridge-replicasets
  when: cartridge_failover_params is defined and cartridge_failover_params.mode == 'stateful'
