---
- name: Check distribution
  fail:
    msg: 'Deploy to {{ ansible_os_family }} distributions is not supported yet'
  when: ansible_os_family not in ["RedHat", "Debian"]
  tags: always

- name: Set remote_user for delegated tasks
  set_fact:
    remote_user: '{{ ansible_user }}'
  when: remote_user is not defined and ansible_user is defined
  tags: always

- name: Validate config
  cartridge_validate_config:
    hosts: '{{ play_hosts }}'
    hostvars: '{{ hostvars }}'
  delegate_to: localhost
  become: false
  run_once: true
  tags: always

- name: Setup facts
  import_tasks: facts.yml

- name: Create machine-wide folders
  include_tasks: folders.yml
  when: >
    cartridge_package_path is regex('\.tar\.gz$') and
    inventory_hostname in hostvars | get_one_not_expelled_instance_for_machine(play_hosts)
  tags:
    - cartridge-instances
    - supervisor

- name: Create instance folders
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | default('0755') }}"
    # owner: "{{ instance_user }}"
    # group: "{{ instance_group }}"
  loop:
    - {path: "{{ instance_work_dir }}"}
  any_errors_fatal: true
  when: cartridge_package_path is regex('\.tar\.gz$')

# Rewrites cartridge_app_name from package info
- name: Install package
  include_tasks: install_package.yml
  when: >-
    cartridge_package_path is defined and
    inventory_hostname in hostvars | get_one_not_expelled_instance_for_machine(play_hosts)
  tags: cartridge-instances, supervisor

- name: Start instance
  include_tasks: start_instance.yml
  when: not expelled
  tags: cartridge-instances, supervisor

# Restart instances and reload systemd-daemon if required
- meta: flush_handlers
  become: false

# - name: Wait for instance to be started
#   cartridge_check_instance_started:
#     control_sock: '{{ instance_control_sock }}'
#     stateboard: '{{ stateboard }}'
#   register: check_instance
#   until: not check_instance.failed
#   retries: '{{ instance_start_timeout // 5 }}'
#   delay: 5
#   when: not expelled
#   any_errors_fatal: true
#   tags: cartridge-instances, supervisor

- name: Waiting for instances to be ready
  vars:
    waiting_for_state:
      - 'Unconfigured'
      - 'RolesConfigured'
    stateboard: "{{ hostvars[inventory_hostname].stateboard | default(false) }}"
    retries: "{{ state_check_retries | default(250) }}"
    delay: "{{ state_check_delay | default(5) }}"
  import_tasks: instance_state.yml
  tags:
    - cartridge-instances
    - supervisor

- name: Connect instance to membership
  cartridge_probe_instance:
    control_sock: '{{ instance_control_sock }}'
    hostvars: '{{ hostvars }}'
    play_hosts: '{{ play_hosts }}'
  register: probe
  until: not probe.failed
  retries: 3
  delay: 5
  when: not expelled and not stateboard
  tags:
    - cartridge-instances
    - cartridge-replicasets
    - supervisor

- name: Select one not expelled instance
  set_fact:
    one_not_expelled_instance: '{{ hostvars | get_one_not_expelled_instance(play_hosts) }}'
  tags:
    - cartridge-replicasets
    - cartridge-config
    - supervisor

- name: Set one control instance to join replicasets
  cartridge_control_instance:
    control_sock: '{{ cartridge_app_name | get_instance_control_sock(one_not_expelled_instance, run_dir) }}'
  register: control_instance
  run_once: true
  delegate_to: '{{ one_not_expelled_instance }}'
  tags:
    - cartridge-replicasets
    - supervisor

- name: Get replicasets
  cartridge_get_replicasets:
    hostvars: '{{ hostvars }}'
    play_hosts: '{{ play_hosts }}'
    control_host: '{{ control_instance.meta.host }}'
  register: replicasets
  run_once: true
  tags:
    - cartridge-replicasets
    - supervisor

- name: Manage replicasets
  include_tasks: manage_replicaset.yml
  vars:
    replicaset: '{{ item }}'
    join_host: '{{ replicasets.meta.join_host }}'
  loop: '{{ replicasets.meta.replicasets }}'
  run_once: true
  tags:
    - cartridge-replicasets
    - supervisor

- name: Expel instance
  include_tasks: expel_instance.yml
  vars:
    control_host: '{{ replicasets.meta.join_host }}'
  when: expelled
  tags:
    - cartridge-replicasets
    - supervisor

- name: Set one control instance to rule them all
  cartridge_control_instance:
    control_sock: '{{ cartridge_app_name | get_instance_control_sock(one_not_expelled_instance, run_dir) }}'
    allow_empty: false
  register: control_instance
  run_once: true
  delegate_to: '{{ one_not_expelled_instance }}'
  when: >-
    cartridge_auth is defined
    or cartridge_app_config is defined
    or cartridge_bootstrap_vshard is defined
    or cartridge_failover is defined
    or cartridge_failover_params is defined
  tags:
    - cartridge-config
    - supervisor

- name: Set control instance facts
  set_fact:
    control_host: '{{ control_instance.meta.host }}'
    control_sock: '{{ cartridge_app_name | get_instance_control_sock(control_instance.meta.host, run_dir) }}'
  when: >-
    cartridge_auth is defined
    or cartridge_app_config is defined
    or cartridge_bootstrap_vshard is defined
    or cartridge_failover is defined
    or cartridge_failover_params is defined
  tags:
    - cartridge-config
    - supervisor

- name: Cartridge auth
  cartridge_auth:
    auth: '{{ cartridge_auth }}'
    control_sock: '{{ control_sock }}'
  delegate_to: '{{ control_host }}'
  run_once: true
  when: cartridge_auth is defined
  tags:
    - cartridge-config
    - supervisor
    - molecule-idempotence-notest

- name: Application config
  cartridge_app_config:
    app_config: '{{ cartridge_app_config }}'
    control_sock: '{{ control_sock }}'
  delegate_to: '{{ control_host }}'
  run_once: true
  when: cartridge_app_config is defined
  tags:
    - cartridge-config
    - supervisor

- name: Bootstrap vshard
  cartridge_bootstrap_vshard:
    control_sock: '{{ control_sock}}'
  delegate_to: '{{ control_host }}'
  run_once: true
  register: bootstrap_vshard
  until: not bootstrap_vshard.failed
  retries: 3
  delay: 5
  when: cartridge_bootstrap_vshard is defined and cartridge_bootstrap_vshard
  tags:
    - cartridge-config
    - supervisor

- name: Manage failover
  cartridge_manage_failover:
    failover_params: '{{ cartridge_failover_params | default(cartridge_failover) }}'
    control_sock: '{{ control_sock }}'
  delegate_to: '{{ control_host }}'
  run_once: true
  when: cartridge_failover is defined or cartridge_failover_params is defined
  tags:
    - cartridge-config
    - supervisor
